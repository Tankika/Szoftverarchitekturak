package hu.bme.archi.user.bean;

import java.util.List;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;
import java.util.Map;
import java.util.Set;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class UserDataResponse implements Bean {
    
    @PropertyDefinition
    private List<Long> projectIds;
    
    @PropertyDefinition
    private Long roleId;

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code UserDataResponse}.
     * @return the meta-bean, not null
     */
    public static UserDataResponse.Meta meta() {
        return UserDataResponse.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(UserDataResponse.Meta.INSTANCE);
    }

    @Override
    public UserDataResponse.Meta metaBean() {
        return UserDataResponse.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the projectIds.
     * @return the value of the property
     */
    public List<Long> getProjectIds() {
        return projectIds;
    }

    /**
     * Sets the projectIds.
     * @param projectIds  the new value of the property
     */
    public void setProjectIds(List<Long> projectIds) {
        this.projectIds = projectIds;
    }

    /**
     * Gets the the {@code projectIds} property.
     * @return the property, not null
     */
    public final Property<List<Long>> projectIds() {
        return metaBean().projectIds().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the roleId.
     * @return the value of the property
     */
    public Long getRoleId() {
        return roleId;
    }

    /**
     * Sets the roleId.
     * @param roleId  the new value of the property
     */
    public void setRoleId(Long roleId) {
        this.roleId = roleId;
    }

    /**
     * Gets the the {@code roleId} property.
     * @return the property, not null
     */
    public final Property<Long> roleId() {
        return metaBean().roleId().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public UserDataResponse clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            UserDataResponse other = (UserDataResponse) obj;
            return JodaBeanUtils.equal(getProjectIds(), other.getProjectIds()) &&
                    JodaBeanUtils.equal(getRoleId(), other.getRoleId());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getProjectIds());
        hash = hash * 31 + JodaBeanUtils.hashCode(getRoleId());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("UserDataResponse{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("projectIds").append('=').append(JodaBeanUtils.toString(getProjectIds())).append(',').append(' ');
        buf.append("roleId").append('=').append(JodaBeanUtils.toString(getRoleId())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code UserDataResponse}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code projectIds} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<Long>> projectIds = DirectMetaProperty.ofReadWrite(
                this, "projectIds", UserDataResponse.class, (Class) List.class);
        /**
         * The meta-property for the {@code roleId} property.
         */
        private final MetaProperty<Long> roleId = DirectMetaProperty.ofReadWrite(
                this, "roleId", UserDataResponse.class, Long.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "projectIds",
                "roleId");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -1969991457:  // projectIds
                    return projectIds;
                case -925416399:  // roleId
                    return roleId;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends UserDataResponse> builder() {
            return new DirectBeanBuilder<UserDataResponse>(new UserDataResponse());
        }

        @Override
        public Class<? extends UserDataResponse> beanType() {
            return UserDataResponse.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code projectIds} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<Long>> projectIds() {
            return projectIds;
        }

        /**
         * The meta-property for the {@code roleId} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Long> roleId() {
            return roleId;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1969991457:  // projectIds
                    return ((UserDataResponse) bean).getProjectIds();
                case -925416399:  // roleId
                    return ((UserDataResponse) bean).getRoleId();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1969991457:  // projectIds
                    ((UserDataResponse) bean).setProjectIds((List<Long>) newValue);
                    return;
                case -925416399:  // roleId
                    ((UserDataResponse) bean).setRoleId((Long) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
