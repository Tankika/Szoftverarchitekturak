package hu.bme.archi.issue.bean;

import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class User implements Bean {
    @PropertyDefinition
    private long id;
    @PropertyDefinition
    private String email;
    @PropertyDefinition
    private String role;
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code User}.
     * @return the meta-bean, not null
     */
    public static User.Meta meta() {
        return User.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(User.Meta.INSTANCE);
    }

    @Override
    public User.Meta metaBean() {
        return User.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the id.
     * @return the value of the property
     */
    public long getId() {
        return id;
    }

    /**
     * Sets the id.
     * @param id  the new value of the property
     */
    public void setId(long id) {
        this.id = id;
    }

    /**
     * Gets the the {@code id} property.
     * @return the property, not null
     */
    public final Property<Long> id() {
        return metaBean().id().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the email.
     * @return the value of the property
     */
    public String getEmail() {
        return email;
    }

    /**
     * Sets the email.
     * @param email  the new value of the property
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Gets the the {@code email} property.
     * @return the property, not null
     */
    public final Property<String> email() {
        return metaBean().email().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the role.
     * @return the value of the property
     */
    public String getRole() {
        return role;
    }

    /**
     * Sets the role.
     * @param role  the new value of the property
     */
    public void setRole(String role) {
        this.role = role;
    }

    /**
     * Gets the the {@code role} property.
     * @return the property, not null
     */
    public final Property<String> role() {
        return metaBean().role().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public User clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            User other = (User) obj;
            return (getId() == other.getId()) &&
                    JodaBeanUtils.equal(getEmail(), other.getEmail()) &&
                    JodaBeanUtils.equal(getRole(), other.getRole());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getEmail());
        hash = hash * 31 + JodaBeanUtils.hashCode(getRole());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(128);
        buf.append("User{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
        buf.append("email").append('=').append(JodaBeanUtils.toString(getEmail())).append(',').append(' ');
        buf.append("role").append('=').append(JodaBeanUtils.toString(getRole())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code User}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code id} property.
         */
        private final MetaProperty<Long> id = DirectMetaProperty.ofReadWrite(
                this, "id", User.class, Long.TYPE);
        /**
         * The meta-property for the {@code email} property.
         */
        private final MetaProperty<String> email = DirectMetaProperty.ofReadWrite(
                this, "email", User.class, String.class);
        /**
         * The meta-property for the {@code role} property.
         */
        private final MetaProperty<String> role = DirectMetaProperty.ofReadWrite(
                this, "role", User.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "id",
                "email",
                "role");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case 96619420:  // email
                    return email;
                case 3506294:  // role
                    return role;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends User> builder() {
            return new DirectBeanBuilder<User>(new User());
        }

        @Override
        public Class<? extends User> beanType() {
            return User.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code id} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Long> id() {
            return id;
        }

        /**
         * The meta-property for the {@code email} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> email() {
            return email;
        }

        /**
         * The meta-property for the {@code role} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> role() {
            return role;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return ((User) bean).getId();
                case 96619420:  // email
                    return ((User) bean).getEmail();
                case 3506294:  // role
                    return ((User) bean).getRole();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    ((User) bean).setId((Long) newValue);
                    return;
                case 96619420:  // email
                    ((User) bean).setEmail((String) newValue);
                    return;
                case 3506294:  // role
                    ((User) bean).setRole((String) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
