package hu.bme.archi.issue.bean;

import java.util.Calendar;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;
import java.util.Map;
import java.util.Set;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class Comment implements Bean {
    @PropertyDefinition
    private String authorEmail;
    @PropertyDefinition
    private String authorRole;
    @PropertyDefinition
    private String message;
    @PropertyDefinition
    private Calendar timeStamp;
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code Comment}.
     * @return the meta-bean, not null
     */
    public static Comment.Meta meta() {
        return Comment.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(Comment.Meta.INSTANCE);
    }

    @Override
    public Comment.Meta metaBean() {
        return Comment.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the authorEmail.
     * @return the value of the property
     */
    public String getAuthorEmail() {
        return authorEmail;
    }

    /**
     * Sets the authorEmail.
     * @param authorEmail  the new value of the property
     */
    public void setAuthorEmail(String authorEmail) {
        this.authorEmail = authorEmail;
    }

    /**
     * Gets the the {@code authorEmail} property.
     * @return the property, not null
     */
    public final Property<String> authorEmail() {
        return metaBean().authorEmail().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the authorRole.
     * @return the value of the property
     */
    public String getAuthorRole() {
        return authorRole;
    }

    /**
     * Sets the authorRole.
     * @param authorRole  the new value of the property
     */
    public void setAuthorRole(String authorRole) {
        this.authorRole = authorRole;
    }

    /**
     * Gets the the {@code authorRole} property.
     * @return the property, not null
     */
    public final Property<String> authorRole() {
        return metaBean().authorRole().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the message.
     * @return the value of the property
     */
    public String getMessage() {
        return message;
    }

    /**
     * Sets the message.
     * @param message  the new value of the property
     */
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * Gets the the {@code message} property.
     * @return the property, not null
     */
    public final Property<String> message() {
        return metaBean().message().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the timeStamp.
     * @return the value of the property
     */
    public Calendar getTimeStamp() {
        return timeStamp;
    }

    /**
     * Sets the timeStamp.
     * @param timeStamp  the new value of the property
     */
    public void setTimeStamp(Calendar timeStamp) {
        this.timeStamp = timeStamp;
    }

    /**
     * Gets the the {@code timeStamp} property.
     * @return the property, not null
     */
    public final Property<Calendar> timeStamp() {
        return metaBean().timeStamp().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public Comment clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            Comment other = (Comment) obj;
            return JodaBeanUtils.equal(getAuthorEmail(), other.getAuthorEmail()) &&
                    JodaBeanUtils.equal(getAuthorRole(), other.getAuthorRole()) &&
                    JodaBeanUtils.equal(getMessage(), other.getMessage()) &&
                    JodaBeanUtils.equal(getTimeStamp(), other.getTimeStamp());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getAuthorEmail());
        hash = hash * 31 + JodaBeanUtils.hashCode(getAuthorRole());
        hash = hash * 31 + JodaBeanUtils.hashCode(getMessage());
        hash = hash * 31 + JodaBeanUtils.hashCode(getTimeStamp());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(160);
        buf.append("Comment{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("authorEmail").append('=').append(JodaBeanUtils.toString(getAuthorEmail())).append(',').append(' ');
        buf.append("authorRole").append('=').append(JodaBeanUtils.toString(getAuthorRole())).append(',').append(' ');
        buf.append("message").append('=').append(JodaBeanUtils.toString(getMessage())).append(',').append(' ');
        buf.append("timeStamp").append('=').append(JodaBeanUtils.toString(getTimeStamp())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code Comment}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code authorEmail} property.
         */
        private final MetaProperty<String> authorEmail = DirectMetaProperty.ofReadWrite(
                this, "authorEmail", Comment.class, String.class);
        /**
         * The meta-property for the {@code authorRole} property.
         */
        private final MetaProperty<String> authorRole = DirectMetaProperty.ofReadWrite(
                this, "authorRole", Comment.class, String.class);
        /**
         * The meta-property for the {@code message} property.
         */
        private final MetaProperty<String> message = DirectMetaProperty.ofReadWrite(
                this, "message", Comment.class, String.class);
        /**
         * The meta-property for the {@code timeStamp} property.
         */
        private final MetaProperty<Calendar> timeStamp = DirectMetaProperty.ofReadWrite(
                this, "timeStamp", Comment.class, Calendar.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "authorEmail",
                "authorRole",
                "message",
                "timeStamp");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 688945361:  // authorEmail
                    return authorEmail;
                case -1501407071:  // authorRole
                    return authorRole;
                case 954925063:  // message
                    return message;
                case 25573622:  // timeStamp
                    return timeStamp;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends Comment> builder() {
            return new DirectBeanBuilder<Comment>(new Comment());
        }

        @Override
        public Class<? extends Comment> beanType() {
            return Comment.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code authorEmail} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> authorEmail() {
            return authorEmail;
        }

        /**
         * The meta-property for the {@code authorRole} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> authorRole() {
            return authorRole;
        }

        /**
         * The meta-property for the {@code message} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> message() {
            return message;
        }

        /**
         * The meta-property for the {@code timeStamp} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Calendar> timeStamp() {
            return timeStamp;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 688945361:  // authorEmail
                    return ((Comment) bean).getAuthorEmail();
                case -1501407071:  // authorRole
                    return ((Comment) bean).getAuthorRole();
                case 954925063:  // message
                    return ((Comment) bean).getMessage();
                case 25573622:  // timeStamp
                    return ((Comment) bean).getTimeStamp();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 688945361:  // authorEmail
                    ((Comment) bean).setAuthorEmail((String) newValue);
                    return;
                case -1501407071:  // authorRole
                    ((Comment) bean).setAuthorRole((String) newValue);
                    return;
                case 954925063:  // message
                    ((Comment) bean).setMessage((String) newValue);
                    return;
                case 25573622:  // timeStamp
                    ((Comment) bean).setTimeStamp((Calendar) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
