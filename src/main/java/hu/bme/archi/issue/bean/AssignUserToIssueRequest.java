package hu.bme.archi.issue.bean;

import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class AssignUserToIssueRequest implements Bean {
    @PropertyDefinition
    private long issueId;
    @PropertyDefinition
    private long userId;
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code AssignUserToIssueRequest}.
     * @return the meta-bean, not null
     */
    public static AssignUserToIssueRequest.Meta meta() {
        return AssignUserToIssueRequest.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(AssignUserToIssueRequest.Meta.INSTANCE);
    }

    @Override
    public AssignUserToIssueRequest.Meta metaBean() {
        return AssignUserToIssueRequest.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the issueId.
     * @return the value of the property
     */
    public long getIssueId() {
        return issueId;
    }

    /**
     * Sets the issueId.
     * @param issueId  the new value of the property
     */
    public void setIssueId(long issueId) {
        this.issueId = issueId;
    }

    /**
     * Gets the the {@code issueId} property.
     * @return the property, not null
     */
    public final Property<Long> issueId() {
        return metaBean().issueId().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the userId.
     * @return the value of the property
     */
    public long getUserId() {
        return userId;
    }

    /**
     * Sets the userId.
     * @param userId  the new value of the property
     */
    public void setUserId(long userId) {
        this.userId = userId;
    }

    /**
     * Gets the the {@code userId} property.
     * @return the property, not null
     */
    public final Property<Long> userId() {
        return metaBean().userId().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public AssignUserToIssueRequest clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            AssignUserToIssueRequest other = (AssignUserToIssueRequest) obj;
            return (getIssueId() == other.getIssueId()) &&
                    (getUserId() == other.getUserId());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getIssueId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getUserId());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("AssignUserToIssueRequest{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("issueId").append('=').append(JodaBeanUtils.toString(getIssueId())).append(',').append(' ');
        buf.append("userId").append('=').append(JodaBeanUtils.toString(getUserId())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code AssignUserToIssueRequest}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code issueId} property.
         */
        private final MetaProperty<Long> issueId = DirectMetaProperty.ofReadWrite(
                this, "issueId", AssignUserToIssueRequest.class, Long.TYPE);
        /**
         * The meta-property for the {@code userId} property.
         */
        private final MetaProperty<Long> userId = DirectMetaProperty.ofReadWrite(
                this, "userId", AssignUserToIssueRequest.class, Long.TYPE);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "issueId",
                "userId");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 2100748244:  // issueId
                    return issueId;
                case -836030906:  // userId
                    return userId;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends AssignUserToIssueRequest> builder() {
            return new DirectBeanBuilder<AssignUserToIssueRequest>(new AssignUserToIssueRequest());
        }

        @Override
        public Class<? extends AssignUserToIssueRequest> beanType() {
            return AssignUserToIssueRequest.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code issueId} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Long> issueId() {
            return issueId;
        }

        /**
         * The meta-property for the {@code userId} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Long> userId() {
            return userId;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 2100748244:  // issueId
                    return ((AssignUserToIssueRequest) bean).getIssueId();
                case -836030906:  // userId
                    return ((AssignUserToIssueRequest) bean).getUserId();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 2100748244:  // issueId
                    ((AssignUserToIssueRequest) bean).setIssueId((Long) newValue);
                    return;
                case -836030906:  // userId
                    ((AssignUserToIssueRequest) bean).setUserId((Long) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
