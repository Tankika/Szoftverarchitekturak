package hu.bme.archi.issue.bean;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class ListIssuesResponse implements Bean {
    
    @PropertyDefinition
    List<ListIssuesData> issues = new ArrayList<>();
    @PropertyDefinition
    String projectName;
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code ListIssuesResponse}.
     * @return the meta-bean, not null
     */
    public static ListIssuesResponse.Meta meta() {
        return ListIssuesResponse.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(ListIssuesResponse.Meta.INSTANCE);
    }

    @Override
    public ListIssuesResponse.Meta metaBean() {
        return ListIssuesResponse.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the issues.
     * @return the value of the property
     */
    public List<ListIssuesData> getIssues() {
        return issues;
    }

    /**
     * Sets the issues.
     * @param issues  the new value of the property
     */
    public void setIssues(List<ListIssuesData> issues) {
        this.issues = issues;
    }

    /**
     * Gets the the {@code issues} property.
     * @return the property, not null
     */
    public final Property<List<ListIssuesData>> issues() {
        return metaBean().issues().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the projectName.
     * @return the value of the property
     */
    public String getProjectName() {
        return projectName;
    }

    /**
     * Sets the projectName.
     * @param projectName  the new value of the property
     */
    public void setProjectName(String projectName) {
        this.projectName = projectName;
    }

    /**
     * Gets the the {@code projectName} property.
     * @return the property, not null
     */
    public final Property<String> projectName() {
        return metaBean().projectName().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public ListIssuesResponse clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            ListIssuesResponse other = (ListIssuesResponse) obj;
            return JodaBeanUtils.equal(getIssues(), other.getIssues()) &&
                    JodaBeanUtils.equal(getProjectName(), other.getProjectName());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getIssues());
        hash = hash * 31 + JodaBeanUtils.hashCode(getProjectName());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("ListIssuesResponse{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("issues").append('=').append(JodaBeanUtils.toString(getIssues())).append(',').append(' ');
        buf.append("projectName").append('=').append(JodaBeanUtils.toString(getProjectName())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code ListIssuesResponse}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code issues} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<ListIssuesData>> issues = DirectMetaProperty.ofReadWrite(
                this, "issues", ListIssuesResponse.class, (Class) List.class);
        /**
         * The meta-property for the {@code projectName} property.
         */
        private final MetaProperty<String> projectName = DirectMetaProperty.ofReadWrite(
                this, "projectName", ListIssuesResponse.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "issues",
                "projectName");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -1179159878:  // issues
                    return issues;
                case -940047036:  // projectName
                    return projectName;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends ListIssuesResponse> builder() {
            return new DirectBeanBuilder<ListIssuesResponse>(new ListIssuesResponse());
        }

        @Override
        public Class<? extends ListIssuesResponse> beanType() {
            return ListIssuesResponse.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code issues} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<ListIssuesData>> issues() {
            return issues;
        }

        /**
         * The meta-property for the {@code projectName} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> projectName() {
            return projectName;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1179159878:  // issues
                    return ((ListIssuesResponse) bean).getIssues();
                case -940047036:  // projectName
                    return ((ListIssuesResponse) bean).getProjectName();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1179159878:  // issues
                    ((ListIssuesResponse) bean).setIssues((List<ListIssuesData>) newValue);
                    return;
                case -940047036:  // projectName
                    ((ListIssuesResponse) bean).setProjectName((String) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
