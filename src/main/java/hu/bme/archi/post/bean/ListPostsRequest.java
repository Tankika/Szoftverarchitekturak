package hu.bme.archi.post.bean;

import java.util.Calendar;
import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class ListPostsRequest implements Bean {

    @PropertyDefinition
    private int page;
    @PropertyDefinition
    private int pageSize;
    @PropertyDefinition
    private String title;
    @PropertyDefinition
    private Integer priceMin;
    @PropertyDefinition
    private Integer priceMax;
    @PropertyDefinition
    private String city;
    @PropertyDefinition
    private Long category;
    @PropertyDefinition
    private Calendar startDate;
    @PropertyDefinition
    private Calendar endDate;
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code ListPostsRequest}.
     * @return the meta-bean, not null
     */
    public static ListPostsRequest.Meta meta() {
        return ListPostsRequest.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(ListPostsRequest.Meta.INSTANCE);
    }

    @Override
    public ListPostsRequest.Meta metaBean() {
        return ListPostsRequest.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the page.
     * @return the value of the property
     */
    public int getPage() {
        return page;
    }

    /**
     * Sets the page.
     * @param page  the new value of the property
     */
    public void setPage(int page) {
        this.page = page;
    }

    /**
     * Gets the the {@code page} property.
     * @return the property, not null
     */
    public final Property<Integer> page() {
        return metaBean().page().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the pageSize.
     * @return the value of the property
     */
    public int getPageSize() {
        return pageSize;
    }

    /**
     * Sets the pageSize.
     * @param pageSize  the new value of the property
     */
    public void setPageSize(int pageSize) {
        this.pageSize = pageSize;
    }

    /**
     * Gets the the {@code pageSize} property.
     * @return the property, not null
     */
    public final Property<Integer> pageSize() {
        return metaBean().pageSize().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the title.
     * @return the value of the property
     */
    public String getTitle() {
        return title;
    }

    /**
     * Sets the title.
     * @param title  the new value of the property
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Gets the the {@code title} property.
     * @return the property, not null
     */
    public final Property<String> title() {
        return metaBean().title().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the priceMin.
     * @return the value of the property
     */
    public Integer getPriceMin() {
        return priceMin;
    }

    /**
     * Sets the priceMin.
     * @param priceMin  the new value of the property
     */
    public void setPriceMin(Integer priceMin) {
        this.priceMin = priceMin;
    }

    /**
     * Gets the the {@code priceMin} property.
     * @return the property, not null
     */
    public final Property<Integer> priceMin() {
        return metaBean().priceMin().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the priceMax.
     * @return the value of the property
     */
    public Integer getPriceMax() {
        return priceMax;
    }

    /**
     * Sets the priceMax.
     * @param priceMax  the new value of the property
     */
    public void setPriceMax(Integer priceMax) {
        this.priceMax = priceMax;
    }

    /**
     * Gets the the {@code priceMax} property.
     * @return the property, not null
     */
    public final Property<Integer> priceMax() {
        return metaBean().priceMax().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the city.
     * @return the value of the property
     */
    public String getCity() {
        return city;
    }

    /**
     * Sets the city.
     * @param city  the new value of the property
     */
    public void setCity(String city) {
        this.city = city;
    }

    /**
     * Gets the the {@code city} property.
     * @return the property, not null
     */
    public final Property<String> city() {
        return metaBean().city().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the category.
     * @return the value of the property
     */
    public Long getCategory() {
        return category;
    }

    /**
     * Sets the category.
     * @param category  the new value of the property
     */
    public void setCategory(Long category) {
        this.category = category;
    }

    /**
     * Gets the the {@code category} property.
     * @return the property, not null
     */
    public final Property<Long> category() {
        return metaBean().category().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the startDate.
     * @return the value of the property
     */
    public Calendar getStartDate() {
        return startDate;
    }

    /**
     * Sets the startDate.
     * @param startDate  the new value of the property
     */
    public void setStartDate(Calendar startDate) {
        this.startDate = startDate;
    }

    /**
     * Gets the the {@code startDate} property.
     * @return the property, not null
     */
    public final Property<Calendar> startDate() {
        return metaBean().startDate().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the endDate.
     * @return the value of the property
     */
    public Calendar getEndDate() {
        return endDate;
    }

    /**
     * Sets the endDate.
     * @param endDate  the new value of the property
     */
    public void setEndDate(Calendar endDate) {
        this.endDate = endDate;
    }

    /**
     * Gets the the {@code endDate} property.
     * @return the property, not null
     */
    public final Property<Calendar> endDate() {
        return metaBean().endDate().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public ListPostsRequest clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            ListPostsRequest other = (ListPostsRequest) obj;
            return (getPage() == other.getPage()) &&
                    (getPageSize() == other.getPageSize()) &&
                    JodaBeanUtils.equal(getTitle(), other.getTitle()) &&
                    JodaBeanUtils.equal(getPriceMin(), other.getPriceMin()) &&
                    JodaBeanUtils.equal(getPriceMax(), other.getPriceMax()) &&
                    JodaBeanUtils.equal(getCity(), other.getCity()) &&
                    JodaBeanUtils.equal(getCategory(), other.getCategory()) &&
                    JodaBeanUtils.equal(getStartDate(), other.getStartDate()) &&
                    JodaBeanUtils.equal(getEndDate(), other.getEndDate());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getPage());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPageSize());
        hash = hash * 31 + JodaBeanUtils.hashCode(getTitle());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPriceMin());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPriceMax());
        hash = hash * 31 + JodaBeanUtils.hashCode(getCity());
        hash = hash * 31 + JodaBeanUtils.hashCode(getCategory());
        hash = hash * 31 + JodaBeanUtils.hashCode(getStartDate());
        hash = hash * 31 + JodaBeanUtils.hashCode(getEndDate());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(320);
        buf.append("ListPostsRequest{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("page").append('=').append(JodaBeanUtils.toString(getPage())).append(',').append(' ');
        buf.append("pageSize").append('=').append(JodaBeanUtils.toString(getPageSize())).append(',').append(' ');
        buf.append("title").append('=').append(JodaBeanUtils.toString(getTitle())).append(',').append(' ');
        buf.append("priceMin").append('=').append(JodaBeanUtils.toString(getPriceMin())).append(',').append(' ');
        buf.append("priceMax").append('=').append(JodaBeanUtils.toString(getPriceMax())).append(',').append(' ');
        buf.append("city").append('=').append(JodaBeanUtils.toString(getCity())).append(',').append(' ');
        buf.append("category").append('=').append(JodaBeanUtils.toString(getCategory())).append(',').append(' ');
        buf.append("startDate").append('=').append(JodaBeanUtils.toString(getStartDate())).append(',').append(' ');
        buf.append("endDate").append('=').append(JodaBeanUtils.toString(getEndDate())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code ListPostsRequest}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code page} property.
         */
        private final MetaProperty<Integer> page = DirectMetaProperty.ofReadWrite(
                this, "page", ListPostsRequest.class, Integer.TYPE);
        /**
         * The meta-property for the {@code pageSize} property.
         */
        private final MetaProperty<Integer> pageSize = DirectMetaProperty.ofReadWrite(
                this, "pageSize", ListPostsRequest.class, Integer.TYPE);
        /**
         * The meta-property for the {@code title} property.
         */
        private final MetaProperty<String> title = DirectMetaProperty.ofReadWrite(
                this, "title", ListPostsRequest.class, String.class);
        /**
         * The meta-property for the {@code priceMin} property.
         */
        private final MetaProperty<Integer> priceMin = DirectMetaProperty.ofReadWrite(
                this, "priceMin", ListPostsRequest.class, Integer.class);
        /**
         * The meta-property for the {@code priceMax} property.
         */
        private final MetaProperty<Integer> priceMax = DirectMetaProperty.ofReadWrite(
                this, "priceMax", ListPostsRequest.class, Integer.class);
        /**
         * The meta-property for the {@code city} property.
         */
        private final MetaProperty<String> city = DirectMetaProperty.ofReadWrite(
                this, "city", ListPostsRequest.class, String.class);
        /**
         * The meta-property for the {@code category} property.
         */
        private final MetaProperty<Long> category = DirectMetaProperty.ofReadWrite(
                this, "category", ListPostsRequest.class, Long.class);
        /**
         * The meta-property for the {@code startDate} property.
         */
        private final MetaProperty<Calendar> startDate = DirectMetaProperty.ofReadWrite(
                this, "startDate", ListPostsRequest.class, Calendar.class);
        /**
         * The meta-property for the {@code endDate} property.
         */
        private final MetaProperty<Calendar> endDate = DirectMetaProperty.ofReadWrite(
                this, "endDate", ListPostsRequest.class, Calendar.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "page",
                "pageSize",
                "title",
                "priceMin",
                "priceMax",
                "city",
                "category",
                "startDate",
                "endDate");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3433103:  // page
                    return page;
                case 859428656:  // pageSize
                    return pageSize;
                case 110371416:  // title
                    return title;
                case -1176957879:  // priceMin
                    return priceMin;
                case -1176958117:  // priceMax
                    return priceMax;
                case 3053931:  // city
                    return city;
                case 50511102:  // category
                    return category;
                case -2129778896:  // startDate
                    return startDate;
                case -1607727319:  // endDate
                    return endDate;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends ListPostsRequest> builder() {
            return new DirectBeanBuilder<ListPostsRequest>(new ListPostsRequest());
        }

        @Override
        public Class<? extends ListPostsRequest> beanType() {
            return ListPostsRequest.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code page} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> page() {
            return page;
        }

        /**
         * The meta-property for the {@code pageSize} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> pageSize() {
            return pageSize;
        }

        /**
         * The meta-property for the {@code title} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> title() {
            return title;
        }

        /**
         * The meta-property for the {@code priceMin} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> priceMin() {
            return priceMin;
        }

        /**
         * The meta-property for the {@code priceMax} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> priceMax() {
            return priceMax;
        }

        /**
         * The meta-property for the {@code city} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> city() {
            return city;
        }

        /**
         * The meta-property for the {@code category} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Long> category() {
            return category;
        }

        /**
         * The meta-property for the {@code startDate} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Calendar> startDate() {
            return startDate;
        }

        /**
         * The meta-property for the {@code endDate} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Calendar> endDate() {
            return endDate;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3433103:  // page
                    return ((ListPostsRequest) bean).getPage();
                case 859428656:  // pageSize
                    return ((ListPostsRequest) bean).getPageSize();
                case 110371416:  // title
                    return ((ListPostsRequest) bean).getTitle();
                case -1176957879:  // priceMin
                    return ((ListPostsRequest) bean).getPriceMin();
                case -1176958117:  // priceMax
                    return ((ListPostsRequest) bean).getPriceMax();
                case 3053931:  // city
                    return ((ListPostsRequest) bean).getCity();
                case 50511102:  // category
                    return ((ListPostsRequest) bean).getCategory();
                case -2129778896:  // startDate
                    return ((ListPostsRequest) bean).getStartDate();
                case -1607727319:  // endDate
                    return ((ListPostsRequest) bean).getEndDate();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3433103:  // page
                    ((ListPostsRequest) bean).setPage((Integer) newValue);
                    return;
                case 859428656:  // pageSize
                    ((ListPostsRequest) bean).setPageSize((Integer) newValue);
                    return;
                case 110371416:  // title
                    ((ListPostsRequest) bean).setTitle((String) newValue);
                    return;
                case -1176957879:  // priceMin
                    ((ListPostsRequest) bean).setPriceMin((Integer) newValue);
                    return;
                case -1176958117:  // priceMax
                    ((ListPostsRequest) bean).setPriceMax((Integer) newValue);
                    return;
                case 3053931:  // city
                    ((ListPostsRequest) bean).setCity((String) newValue);
                    return;
                case 50511102:  // category
                    ((ListPostsRequest) bean).setCategory((Long) newValue);
                    return;
                case -2129778896:  // startDate
                    ((ListPostsRequest) bean).setStartDate((Calendar) newValue);
                    return;
                case -1607727319:  // endDate
                    ((ListPostsRequest) bean).setEndDate((Calendar) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
