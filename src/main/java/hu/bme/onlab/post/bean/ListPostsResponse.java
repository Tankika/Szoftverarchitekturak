package hu.bme.onlab.post.bean;

import java.util.List;
import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class ListPostsResponse implements Bean {

    @PropertyDefinition
    private List<ListPostData> posts;
    @PropertyDefinition
    private long totalPosts;
    
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code ListPostsResponse}.
     * @return the meta-bean, not null
     */
    public static ListPostsResponse.Meta meta() {
        return ListPostsResponse.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(ListPostsResponse.Meta.INSTANCE);
    }

    @Override
    public ListPostsResponse.Meta metaBean() {
        return ListPostsResponse.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the posts.
     * @return the value of the property
     */
    public List<ListPostData> getPosts() {
        return posts;
    }

    /**
     * Sets the posts.
     * @param posts  the new value of the property
     */
    public void setPosts(List<ListPostData> posts) {
        this.posts = posts;
    }

    /**
     * Gets the the {@code posts} property.
     * @return the property, not null
     */
    public final Property<List<ListPostData>> posts() {
        return metaBean().posts().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the totalPosts.
     * @return the value of the property
     */
    public long getTotalPosts() {
        return totalPosts;
    }

    /**
     * Sets the totalPosts.
     * @param totalPosts  the new value of the property
     */
    public void setTotalPosts(long totalPosts) {
        this.totalPosts = totalPosts;
    }

    /**
     * Gets the the {@code totalPosts} property.
     * @return the property, not null
     */
    public final Property<Long> totalPosts() {
        return metaBean().totalPosts().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public ListPostsResponse clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            ListPostsResponse other = (ListPostsResponse) obj;
            return JodaBeanUtils.equal(getPosts(), other.getPosts()) &&
                    (getTotalPosts() == other.getTotalPosts());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getPosts());
        hash = hash * 31 + JodaBeanUtils.hashCode(getTotalPosts());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("ListPostsResponse{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("posts").append('=').append(JodaBeanUtils.toString(getPosts())).append(',').append(' ');
        buf.append("totalPosts").append('=').append(JodaBeanUtils.toString(getTotalPosts())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code ListPostsResponse}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code posts} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<ListPostData>> posts = DirectMetaProperty.ofReadWrite(
                this, "posts", ListPostsResponse.class, (Class) List.class);
        /**
         * The meta-property for the {@code totalPosts} property.
         */
        private final MetaProperty<Long> totalPosts = DirectMetaProperty.ofReadWrite(
                this, "totalPosts", ListPostsResponse.class, Long.TYPE);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "posts",
                "totalPosts");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 106855379:  // posts
                    return posts;
                case -719381777:  // totalPosts
                    return totalPosts;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends ListPostsResponse> builder() {
            return new DirectBeanBuilder<ListPostsResponse>(new ListPostsResponse());
        }

        @Override
        public Class<? extends ListPostsResponse> beanType() {
            return ListPostsResponse.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code posts} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<ListPostData>> posts() {
            return posts;
        }

        /**
         * The meta-property for the {@code totalPosts} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Long> totalPosts() {
            return totalPosts;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 106855379:  // posts
                    return ((ListPostsResponse) bean).getPosts();
                case -719381777:  // totalPosts
                    return ((ListPostsResponse) bean).getTotalPosts();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 106855379:  // posts
                    ((ListPostsResponse) bean).setPosts((List<ListPostData>) newValue);
                    return;
                case -719381777:  // totalPosts
                    ((ListPostsResponse) bean).setTotalPosts((Long) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
