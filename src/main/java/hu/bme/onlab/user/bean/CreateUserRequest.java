package hu.bme.onlab.user.bean;

import java.util.List;
import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
public class CreateUserRequest implements Bean {

    @PropertyDefinition(validate = "notEmpty")
    private String email;
    
    @PropertyDefinition(validate = "notEmpty")
    private String password;
    
    @PropertyDefinition
    private List<Long> projectIds;
    
    @PropertyDefinition(validate = "notNull")
    private List<Long> roleIds;

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code CreateUserRequest}.
     * @return the meta-bean, not null
     */
    public static CreateUserRequest.Meta meta() {
        return CreateUserRequest.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(CreateUserRequest.Meta.INSTANCE);
    }

    @Override
    public CreateUserRequest.Meta metaBean() {
        return CreateUserRequest.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the email.
     * @return the value of the property, not empty
     */
    public String getEmail() {
        return email;
    }

    /**
     * Sets the email.
     * @param email  the new value of the property, not empty
     */
    public void setEmail(String email) {
        JodaBeanUtils.notEmpty(email, "email");
        this.email = email;
    }

    /**
     * Gets the the {@code email} property.
     * @return the property, not null
     */
    public final Property<String> email() {
        return metaBean().email().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the password.
     * @return the value of the property, not empty
     */
    public String getPassword() {
        return password;
    }

    /**
     * Sets the password.
     * @param password  the new value of the property, not empty
     */
    public void setPassword(String password) {
        JodaBeanUtils.notEmpty(password, "password");
        this.password = password;
    }

    /**
     * Gets the the {@code password} property.
     * @return the property, not null
     */
    public final Property<String> password() {
        return metaBean().password().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the projectIds.
     * @return the value of the property
     */
    public List<Long> getProjectIds() {
        return projectIds;
    }

    /**
     * Sets the projectIds.
     * @param projectIds  the new value of the property
     */
    public void setProjectIds(List<Long> projectIds) {
        this.projectIds = projectIds;
    }

    /**
     * Gets the the {@code projectIds} property.
     * @return the property, not null
     */
    public final Property<List<Long>> projectIds() {
        return metaBean().projectIds().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the roleIds.
     * @return the value of the property, not null
     */
    public List<Long> getRoleIds() {
        return roleIds;
    }

    /**
     * Sets the roleIds.
     * @param roleIds  the new value of the property, not null
     */
    public void setRoleIds(List<Long> roleIds) {
        JodaBeanUtils.notNull(roleIds, "roleIds");
        this.roleIds = roleIds;
    }

    /**
     * Gets the the {@code roleIds} property.
     * @return the property, not null
     */
    public final Property<List<Long>> roleIds() {
        return metaBean().roleIds().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public CreateUserRequest clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            CreateUserRequest other = (CreateUserRequest) obj;
            return JodaBeanUtils.equal(getEmail(), other.getEmail()) &&
                    JodaBeanUtils.equal(getPassword(), other.getPassword()) &&
                    JodaBeanUtils.equal(getProjectIds(), other.getProjectIds()) &&
                    JodaBeanUtils.equal(getRoleIds(), other.getRoleIds());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getEmail());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPassword());
        hash = hash * 31 + JodaBeanUtils.hashCode(getProjectIds());
        hash = hash * 31 + JodaBeanUtils.hashCode(getRoleIds());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(160);
        buf.append("CreateUserRequest{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("email").append('=').append(JodaBeanUtils.toString(getEmail())).append(',').append(' ');
        buf.append("password").append('=').append(JodaBeanUtils.toString(getPassword())).append(',').append(' ');
        buf.append("projectIds").append('=').append(JodaBeanUtils.toString(getProjectIds())).append(',').append(' ');
        buf.append("roleIds").append('=').append(JodaBeanUtils.toString(getRoleIds())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code CreateUserRequest}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code email} property.
         */
        private final MetaProperty<String> email = DirectMetaProperty.ofReadWrite(
                this, "email", CreateUserRequest.class, String.class);
        /**
         * The meta-property for the {@code password} property.
         */
        private final MetaProperty<String> password = DirectMetaProperty.ofReadWrite(
                this, "password", CreateUserRequest.class, String.class);
        /**
         * The meta-property for the {@code projectIds} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<Long>> projectIds = DirectMetaProperty.ofReadWrite(
                this, "projectIds", CreateUserRequest.class, (Class) List.class);
        /**
         * The meta-property for the {@code roleIds} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<Long>> roleIds = DirectMetaProperty.ofReadWrite(
                this, "roleIds", CreateUserRequest.class, (Class) List.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "email",
                "password",
                "projectIds",
                "roleIds");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 96619420:  // email
                    return email;
                case 1216985755:  // password
                    return password;
                case -1969991457:  // projectIds
                    return projectIds;
                case 1376862818:  // roleIds
                    return roleIds;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends CreateUserRequest> builder() {
            return new DirectBeanBuilder<CreateUserRequest>(new CreateUserRequest());
        }

        @Override
        public Class<? extends CreateUserRequest> beanType() {
            return CreateUserRequest.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code email} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> email() {
            return email;
        }

        /**
         * The meta-property for the {@code password} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> password() {
            return password;
        }

        /**
         * The meta-property for the {@code projectIds} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<Long>> projectIds() {
            return projectIds;
        }

        /**
         * The meta-property for the {@code roleIds} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<Long>> roleIds() {
            return roleIds;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 96619420:  // email
                    return ((CreateUserRequest) bean).getEmail();
                case 1216985755:  // password
                    return ((CreateUserRequest) bean).getPassword();
                case -1969991457:  // projectIds
                    return ((CreateUserRequest) bean).getProjectIds();
                case 1376862818:  // roleIds
                    return ((CreateUserRequest) bean).getRoleIds();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 96619420:  // email
                    ((CreateUserRequest) bean).setEmail((String) newValue);
                    return;
                case 1216985755:  // password
                    ((CreateUserRequest) bean).setPassword((String) newValue);
                    return;
                case -1969991457:  // projectIds
                    ((CreateUserRequest) bean).setProjectIds((List<Long>) newValue);
                    return;
                case 1376862818:  // roleIds
                    ((CreateUserRequest) bean).setRoleIds((List<Long>) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

        @Override
        protected void validate(Bean bean) {
            JodaBeanUtils.notEmpty(((CreateUserRequest) bean).email, "email");
            JodaBeanUtils.notEmpty(((CreateUserRequest) bean).password, "password");
            JodaBeanUtils.notNull(((CreateUserRequest) bean).roleIds, "roleIds");
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
